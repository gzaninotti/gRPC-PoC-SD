// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: poc-grpc/pocgrpc.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BroadcasterClient is the client API for Broadcaster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BroadcasterClient interface {
	// Bradocast a message
	Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastRes, error)
}

type broadcasterClient struct {
	cc grpc.ClientConnInterface
}

func NewBroadcasterClient(cc grpc.ClientConnInterface) BroadcasterClient {
	return &broadcasterClient{cc}
}

func (c *broadcasterClient) Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastRes, error) {
	out := new(BroadcastRes)
	err := c.cc.Invoke(ctx, "/pocgrpc.Broadcaster/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BroadcasterServer is the server API for Broadcaster service.
// All implementations must embed UnimplementedBroadcasterServer
// for forward compatibility
type BroadcasterServer interface {
	// Bradocast a message
	Broadcast(context.Context, *BroadcastReq) (*BroadcastRes, error)
	mustEmbedUnimplementedBroadcasterServer()
}

// UnimplementedBroadcasterServer must be embedded to have forward compatible implementations.
type UnimplementedBroadcasterServer struct {
}

func (UnimplementedBroadcasterServer) Broadcast(context.Context, *BroadcastReq) (*BroadcastRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedBroadcasterServer) mustEmbedUnimplementedBroadcasterServer() {}

// UnsafeBroadcasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BroadcasterServer will
// result in compilation errors.
type UnsafeBroadcasterServer interface {
	mustEmbedUnimplementedBroadcasterServer()
}

func RegisterBroadcasterServer(s grpc.ServiceRegistrar, srv BroadcasterServer) {
	s.RegisterService(&Broadcaster_ServiceDesc, srv)
}

func _Broadcaster_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BroadcasterServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pocgrpc.Broadcaster/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BroadcasterServer).Broadcast(ctx, req.(*BroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Broadcaster_ServiceDesc is the grpc.ServiceDesc for Broadcaster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Broadcaster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pocgrpc.Broadcaster",
	HandlerType: (*BroadcasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _Broadcaster_Broadcast_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poc-grpc/pocgrpc.proto",
}
